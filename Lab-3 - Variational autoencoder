import cv2
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D
import matplotlib.pyplot as plt
from google.colab import files

# Upload image manually
uploaded = files.upload()
image_path = list(uploaded.keys())[0]

# Load the uploaded image
image = cv2.imread(image_path)
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
image = cv2.resize(image, (128, 128))  # Resize for simplicity
image = image / 255.0  # Normalize to [0,1]

# Add synthetic noise
noise_factor = 0.2
noisy_image = image + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=image.shape)
noisy_image = np.clip(noisy_image, 0., 1.)

# Prepare dataset
X_train = np.expand_dims(noisy_image, axis=0)
Y_train = np.expand_dims(image, axis=0)

# Build the autoencoder
input_img = Input(shape=(128, 128, 3))

# Encoder
x = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)
x = MaxPooling2D((2, 2), padding='same')(x)
x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)
x = MaxPooling2D((2, 2), padding='same')(x)

# Decoder
x = Conv2D(64, (3, 3), activation='relu', padding='same')(x)
x = UpSampling2D((2, 2))(x)
x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)
x = UpSampling2D((2, 2))(x)
out_img = Conv2D(3, (3, 3), activation='sigmoid', padding='same')(x)

# Compile model
autoencoder = Model(input_img, out_img)
autoencoder.compile(optimizer='adam', loss='mse')

# Train the model
autoencoder.fit(X_train, Y_train, epochs=100, batch_size=1, verbose=1)

# Denoise the image
denoised_image = autoencoder.predict(np.expand_dims(noisy_image, axis=0))[0]

# Plot the results
fig, ax = plt.subplots(1, 3, figsize=(12, 4))
ax[0].imshow(image)
ax[0].set_title("Original Image")
ax[1].imshow(noisy_image)
ax[1].set_title("Noisy Image")
ax[2].imshow(denoised_image)
ax[2].set_title("Denoised Image")
for a in ax:
    a.axis('off')
plt.show()
