import numpy as np
from sklearn.datasets import load_digits
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from tensorflow.keras import layers, models
from tensorflow.keras import regularizers

digits = load_digits()
X = digits.data
y = digits.target

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

def build_autoencoder(input_dim, hidden_dim):
    # Encoder
    input_layer = layers.Input(shape=(input_dim,))
    encoded = layers.Dense(hidden_dim, activation='relu', activity_regularizer=regularizers.l2(0.01))(input_layer)

    # Decoder
    decoded = layers.Dense(input_dim, activation='sigmoid')(encoded)

    # Autoencoder model
    autoencoder = models.Model(input_layer, decoded)

    # Encoder model to get the hidden representation
    encoder = models.Model(input_layer, encoded)

    # Compile the model
    autoencoder.compile(optimizer='adam', loss='mean_squared_error')

    return autoencoder, encoder

print("Training the first autoencoder layer")
autoencoder_1, encoder_1 = build_autoencoder(X_train.shape[1], 128)

X_train_encoded_1 = encoder_1.predict(X_train)
X_test_encoded_1 = encoder_1.predict(X_test)

print("Training the second autoencoder layer")
autoencoder_2, encoder_2 = build_autoencoder(128, 64)
autoencoder_2.fit(X_train_encoded_1, X_train_encoded_1, epochs=50, batch_size=256, shuffle=True, validation_data=(X_test_encoded_1, X_test_encoded_1))

X_train_encoded_2 = encoder_2.predict(X_train_encoded_1)
X_test_encoded_2 = encoder_2.predict(X_test_encoded_1)

print("Training the third autoencoder layer")
autoencoder_3, encoder_3 = build_autoencoder(64, 32)
autoencoder_3.fit(X_train_encoded_2, X_train_encoded_2, epochs=50, batch_size=256, shuffle=True, validation_data=(X_test_encoded_2, X_test_encoded_2))

X_train_encoded_3 = encoder_3.predict(X_train_encoded_2)
X_test_encoded_3 = encoder_3.predict(X_test_encoded_2)

X_train_stacked = np.hstack([X_train_encoded_1, X_train_encoded_2, X_train_encoded_3])
X_test_stacked = np.hstack([X_test_encoded_1, X_test_encoded_2, X_test_encoded_3])

print("Training a classifier on the stacked features")
from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(max_iter=1000, random_state=42)
clf.fit(X_train_stacked, y_train)

y_pred = clf.predict(X_test_stacked)
print(classification_report(y_test, y_pred))

